Digital PWM
    D0  DI_HOME_TRAY; DI_HOME_WIPER; DI_HOME_XGANTRY; DI_HOME_YGANTRY
    D1  DO_TRAY_PUL
    D2  DO_WIPER_PUL
    D3  DO_XGANTRY_PUL
    D4  DO_YGANTRY_PUL
    D5  DO_TRAY_DIR; DO_WIPER_DIR; DO_XGANTRY_DIR; DO_YGANTRY_DIR
    D6  DI_EMERGENCYSTOP
    D7  DI_START
    D8  
    D9  DO_CAM_TAKEPICTURE
    D10 DI_CAM_GOTPICTURE
    D11 DI_CAM_FAILED
    D12 DI_CAM_MISPRINT
    D13

Analog In
    A0/D14 DO_Ready
    A1/D15 DO_Part_Failure
    A2/D16 DO_WIP
    A3/D17 DO_System_Failure
    A4/D18
    A5/D19

Power
    5V
    3.3V
    3V
    Vin
    GND1
    GND2
    GND3

RESET

-----Test 1-----
In Test1, the system got stuck in FINISH_WIPER_MOVE_OUT for unknown reasons.
    Testing shows that the motion setup in the previou case never completes.
    This problem was corrected by changing the to setupInMovementSteps rather than setupMovementInMillimeters for some reason.
    I suspect that the actuator was taking a very long time to get into position.
    [133 - 143] We should probably set speed and acceleration in millimeters rather than steps.

[385 - 386] Are the x and y positions for gantry supposed to be in millimeters or steps? It is currently programmed for steps.

-----Test 2-----
[51] Its clear from looking at xyposition values that they are meant to be in millimeters so I'm going to correct any instances of movement in steps.

I changed over the movement functions to use millimeters and the effect was to slow down the process considerably.
    We based out millimeter movements on the setStepsPerMillimeter function, so the issue should not be with the speed.
    The overall effect seems to be that waaaaay more cycles are necessary to accomplish the same movement with millimeter movement as with step movement.
    This is a significant issue but could be circumvented by using exclusively step functions over millimeter functions.
    Looking into the setupMovementInMillimeters function, its clear that the function really only calls setupMovementInSteps with the millimeter multiplied by the scaling factor steps/millimeter.

Apparently Serial.print statements will slow down the movement process so I am going to remove every repeating print statement and only add print statements when a case changes.

I removed all repeating Serial.print statements and the program has sped up significantly - Too much in a lot of areas. 
    Large movements complete in under a second.
    Double-checking the application of millimeters movements, I can't find anything that would significantly shorten the distance travelled.
    I suspect that this has something to do with the lack of a homing function.
    I'm going to try zeroing all of the positions in the setup code and see if that changes anything.

Zeroing the actuator positions in setup() did nothing to change the speed of the actuator movements.
    Next I will double check that the speeds are reasonable.

The speeds are reasonable.
    Next I will check to see if the SpeedyStepper library has any advice on this problem.
    I'll also check to see if there are any places in the code where we allow the movement to end early. 
    I'll create a counter for this purpose to see how many steps have been taken during movement.

I found a mistake in FINISH_TRAY_MOVE_OUT that caused the movement to be skipped.
    After correcting the mistake, the movement time seems reasonable.

A possible issue exists in the WIPER_MOVE_OUT reporting a different number of steps than WIPER_MOVE_IN.
    The steps reported are far above the number of steps that should have occurred during movements.
    The speedystepper movement won't move a step everytime the loop increments - the reason for the high count is likely due to that.
    This is a good thing because it confirms that the program is running faster than the fastest movement.
